<!DOCTYPE html>
<html>
<head>
    <title>{{product.title}} - Detalle</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">
    <!-- Estilos personalizados -->
    <style>
        .carousel-control-prev-icon,
        .carousel-control-next-icon {
            background-color: #0d6efd;
            border-radius: 50%;
            padding: 20px;
        }

        .carousel-control-prev,
        .carousel-control-next {
            width: 10%;
        }

        .carousel-control-prev:hover .carousel-control-prev-icon,
        .carousel-control-next:hover .carousel-control-next-icon {
            background-color: #0b5ed7;
        }
    </style>
</head>
<body>
    <div class="container mt-4">
        <!-- Toast para notificaciones -->
        <div class="toast-container position-fixed bottom-0 end-0 p-3">
            <div id="notificationToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header">
                    <strong class="me-auto">Notificación</strong>
                    <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
                <div class="toast-body"></div>
            </div>
        </div>

        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="/products">Productos</a></li>
                <li class="breadcrumb-item active">{{product.title}}</li>
            </ol>
        </nav>

        <div class="row">
            <!-- Imágenes del producto -->
            <div class="col-md-6">
                {{#if product.thumbnails.[0]}}
                <div id="productCarousel" class="carousel slide" data-bs-ride="carousel">
                    <div class="carousel-inner">
                        {{#each product.thumbnails}}
                        <div class="carousel-item {{#if @first}}active{{/if}}">
                            <img src="{{this}}" class="d-block w-100" alt="{{../product.title}}">
                        </div>
                        {{/each}}
                    </div>
                    {{#if (gt product.thumbnails.length 1)}}
                    <button class="carousel-control-prev" type="button" data-bs-target="#productCarousel" data-bs-slide="prev">
                        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                        <span class="visually-hidden">Anterior</span>
                    </button>
                    <button class="carousel-control-next" type="button" data-bs-target="#productCarousel" data-bs-slide="next">
                        <span class="carousel-control-next-icon" aria-hidden="true"></span>
                        <span class="visually-hidden">Siguiente</span>
                    </button>
                    {{/if}}
                </div>
                {{else}}
                <div class="text-center">
                    <img src="/img/no-image.jpg" class="img-fluid" alt="Sin imagen">
                </div>
                {{/if}}
            </div>

            <!-- Información del producto -->
            <div class="col-md-6">
                <h1>{{product.title}}</h1>
                <p class="text-muted">{{product.category}} / {{product.subcategory}}</p>
                
                <div class="mb-3">
                    <h3>${{product.price}}</h3>
                    <p class="mb-1">Stock disponible: <span id="stockDisplay">{{product.stock}}</span> unidades</p>
                    {{#if (gt product.stock 0)}}
                    <div class="input-group mb-3" style="max-width: 200px;">
                        <button class="btn btn-outline-secondary" type="button" onclick="updateQuantity(-1)">-</button>
                        <input type="number" class="form-control text-center" id="quantity" value="1" min="1" max="{{product.stock}}">
                        <button class="btn btn-outline-secondary" type="button" onclick="updateQuantity(1)">+</button>
                    </div>
                    <button class="btn btn-primary" onclick="addToCart('{{product._id}}', {{product.stock}})" {{#if (eq product.stock 0)}}disabled{{/if}}>
                        Agregar al Carrito
                    </button>
                    {{else}}
                    <button class="btn btn-secondary" disabled>Sin Stock</button>
                    {{/if}}
                </div>

                <div class="mb-4">
                    <h4>Detalles del producto</h4>
                    <p>{{product.description}}</p>
                    <ul class="list-unstyled">
                        <li><strong>Código:</strong> {{product.code}}</li>
                        <li><strong>Estado:</strong> {{#if product.status}}Disponible{{else}}No disponible{{/if}}</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        const toast = new bootstrap.Toast(document.getElementById('notificationToast'));
        const toastBody = document.querySelector('.toast-body');
        const quantityInput = document.getElementById('quantity');
        const stockDisplay = document.getElementById('stockDisplay');
        let currentStock = {{product.stock}};

        function updateQuantity(change) {
            const currentValue = parseInt(quantityInput.value);
            const newValue = currentValue + change;
            
            if (newValue >= 1 && newValue <= currentStock) {
                quantityInput.value = newValue;
            }
        }

        quantityInput.addEventListener('change', function() {
            let value = parseInt(this.value);
            if (isNaN(value) || value < 1) {
                value = 1;
            } else if (value > currentStock) {
                value = currentStock;
            }
            this.value = value;
        });

        async function addToCart(productId, stockDisponible) {
            try {
                let cartId = localStorage.getItem('cartId');
                let currentQuantity = 0;
                const quantityToAdd = parseInt(quantityInput.value);

                if (!cartId) {
                    const response = await fetch('/api/carts', {
                        method: 'POST'
                    });
                    if (!response.ok) {
                        throw new Error('Error al crear el carrito');
                    }
                    const data = await response.json();
                    cartId = data.payload._id;
                    localStorage.setItem('cartId', cartId);
                } else {
                    // Verificar cantidad actual en el carrito
                    try {
                        const cartResponse = await fetch(`/api/carts/${cartId}`);
                        const cartData = await cartResponse.json();
                        
                        if (cartData.status === 'success' && cartData.payload && cartData.payload.products) {
                            const productInCart = cartData.payload.products.find(p => p.product && p.product._id === productId);
                            currentQuantity = productInCart ? productInCart.quantity : 0;
                        }
                    } catch (error) {
                        console.error('Error al verificar el carrito:', error);
                        currentQuantity = 0;
                    }
                }

                // Verificar si hay suficiente stock
                if (currentQuantity + quantityToAdd > stockDisponible) {
                    throw new Error(`Solo hay ${stockDisponible - currentQuantity} unidades disponibles para agregar`);
                }

                const response = await fetch(`/api/carts/${cartId}/products/${productId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ quantity: quantityToAdd })
                });

                if (response.ok) {
                    // Actualizar el stock mostrado
                    currentStock -= quantityToAdd;
                    stockDisplay.textContent = currentStock;
                    
                    // Deshabilitar el botón si no hay más stock
                    if (currentStock <= 0) {
                        const addButton = document.querySelector(`button[onclick="addToCart('${productId}', ${stockDisponible})"]`);
                        if (addButton) {
                            addButton.disabled = true;
                            addButton.textContent = 'Sin Stock';
                        }
                    }

                    // Mostrar notificación de éxito
                    toastBody.parentElement.classList.remove('bg-success', 'bg-danger', 'bg-warning', 'text-white', 'text-dark');
                    toastBody.parentElement.classList.add('bg-success', 'text-white');
                    toastBody.textContent = '¡Producto agregado al carrito exitosamente!';
                    toast.show();

                    // Resetear la cantidad a 1
                    quantityInput.value = 1;
                } else {
                    const errorData = await response.json();
                    throw new Error(errorData.error || 'Error al agregar al carrito');
                }
            } catch (error) {
                console.error('Error:', error);
                toastBody.parentElement.classList.remove('bg-success', 'bg-danger', 'bg-warning', 'text-white', 'text-dark');
                toastBody.parentElement.classList.add('bg-danger', 'text-white');
                toastBody.textContent = error.message || 'Error al agregar el producto al carrito';
                toast.show();
            }
        }
    </script>
</body>
</html> 