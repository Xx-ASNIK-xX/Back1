<!DOCTYPE html>
<html>
<head>
    <title>Productos</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">
    <!-- Estilos personalizados -->
    <style>
        .carousel-control-prev-icon,
        .carousel-control-next-icon {
            background-color: #ff6b00;
            border-radius: 50%;
            padding: 20px;
        }

        .carousel-control-prev,
        .carousel-control-next {
            width: 10%;
        }

        .carousel-control-prev:hover .carousel-control-prev-icon,
        .carousel-control-next:hover .carousel-control-next-icon {
            background-color: #ff8533;
        }
    </style>
</head>
<body>
    <div class="container mt-4">
        <!-- Barra de navegación -->
        <nav class="navbar navbar-expand-lg navbar-light bg-light mb-4">
            <div class="container-fluid">
                <a class="navbar-brand" href="/products">Lista de Productos</a>
                <button id="viewCartBtn" class="btn btn-outline-primary" onclick="viewCart()">
                    Ver Carrito
                </button>
            </div>
        </nav>

        <h1>Lista de Productos</h1>
        
        <!-- Toast para notificaciones -->
        <div class="toast-container position-fixed bottom-0 end-0 p-3">
            <div id="notificationToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header">
                    <strong class="me-auto">Notificación</strong>
                    <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
                <div class="toast-body">
                </div>
            </div>
        </div>

        <!-- Filtros -->
        <div class="row mb-4">
            <div class="col">
                <form id="filterForm" class="d-flex gap-3 align-items-center">
                    <select name="category" class="form-select" style="width: auto;">
                        <option value="">Todas las categorías</option>
                        {{#each categories}}
                        <option value="{{this}}" {{#if (eq ../selectedCategory this)}}selected{{/if}}>{{this}}</option>
                        {{/each}}
                    </select>

                    <select name="sort" class="form-select" style="width: auto;">
                        <option value="">Sin ordenar</option>
                        <option value="asc" {{#if (eq sort "asc")}}selected{{/if}}>Precio: Menor a Mayor</option>
                        <option value="desc" {{#if (eq sort "desc")}}selected{{/if}}>Precio: Mayor a Menor</option>
                    </select>

                    <select name="limit" class="form-select" style="width: auto;">
                        <option value="10" {{#if (eq limit "10")}}selected{{/if}}>10 por página</option>
                        <option value="20" {{#if (eq limit "20")}}selected{{/if}}>20 por página</option>
                        <option value="50" {{#if (eq limit "50")}}selected{{/if}}>50 por página</option>
                    </select>

                    <button type="submit" class="btn btn-primary">Aplicar Filtros</button>
                    <button type="button" class="btn btn-secondary" onclick="clearFilters()">Limpiar Filtros</button>
                </form>
            </div>
        </div>

        <!-- Lista de Productos -->
        <div class="row row-cols-1 row-cols-md-3 g-4">
            {{#each products}}
            <div class="col">
                <div class="card h-100">
                    <!-- Carrusel de imágenes -->
                    <div id="carousel-{{_id}}" class="carousel slide" data-bs-ride="carousel">
                        <div class="carousel-inner">
                            {{#each thumbnails}}
                            <div class="carousel-item {{#if @first}}active{{/if}}">
                                <img src="{{this}}" class="card-img-top d-block w-100" alt="{{../title}}" style="height: 200px; object-fit: cover;">
                            </div>
                            {{/each}}
                        </div>
                    </div>
                    <div class="card-body">
                        <h5 class="card-title">{{title}}</h5>
                        <p class="card-text">{{description}}</p>
                        <p class="card-text"><strong>Precio: ${{price}}</strong></p>
                        <p class="card-text">
                            Stock: <span class="{{#if (eq stock 0)}}text-danger{{/if}}">{{stock}}</span>
                        </p>
                        <p class="card-text">
                            <span class="badge {{#if (and status (gt stock 0))}}bg-success{{else}}bg-danger{{/if}}">
                                {{#if (and status (gt stock 0))}}Disponible{{else}}No disponible{{/if}}
                            </span>
                        </p>
                        <div class="d-flex justify-content-between">
                            <a href="/products/{{_id}}" class="btn btn-info">Ver Detalles</a>
                            <button onclick="addToCart('{{_id}}', {{stock}})" 
                                    class="btn btn-success" 
                                    {{#unless (and status (gt stock 0))}}disabled{{/unless}}
                                    data-stock="{{stock}}">
                                {{#if (gt stock 0)}}
                                    Agregar al Carrito
                                {{else}}
                                    Sin Stock
                                {{/if}}
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            {{/each}}
        </div>

        <!-- Paginación -->
        <div class="d-flex justify-content-center mt-4">
            <nav aria-label="Page navigation">
                <ul class="pagination">
                    {{#if pagination.hasPrevPage}}
                    <li class="page-item">
                        <a class="page-link" href="{{pagination.prevLink}}" aria-label="Previous">
                            <span aria-hidden="true">&laquo;</span>
                        </a>
                    </li>
                    {{/if}}
                    
                    <li class="page-item active">
                        <span class="page-link">Página {{pagination.page}} de {{pagination.totalPages}}</span>
                    </li>
                    
                    {{#if pagination.hasNextPage}}
                    <li class="page-item">
                        <a class="page-link" href="{{pagination.nextLink}}" aria-label="Next">
                            <span aria-hidden="true">&raquo;</span>
                        </a>
                    </li>
                    {{/if}}
                </ul>
            </nav>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        const toast = new bootstrap.Toast(document.getElementById('notificationToast'));
        const toastBody = document.querySelector('.toast-body');

        function clearFilters() {
            window.location.href = '/products';
        }

        async function addToCart(productId, stockDisponible) {
            try {
                let cartId = localStorage.getItem('cartId');
                let currentQuantity = 0;
                
                if (!cartId) {
                    const response = await fetch('/api/carts', {
                        method: 'POST'
                    });
                    if (!response.ok) {
                        throw new Error('Error al crear el carrito');
                    }
                    const data = await response.json();
                    cartId = data.payload._id;
                    localStorage.setItem('cartId', cartId);
                } else {
                    // Solo verificar el carrito si ya existe
                    try {
                        const cartResponse = await fetch(`/api/carts/${cartId}`);
                        const cartData = await cartResponse.json();
                        
                        if (cartData.status === 'success' && cartData.payload && cartData.payload.products) {
                            const productInCart = cartData.payload.products.find(p => p.product && p.product._id === productId);
                            currentQuantity = productInCart ? productInCart.quantity : 0;
                        }
                    } catch (error) {
                        console.error('Error al verificar el carrito:', error);
                        // Si hay error al verificar el carrito, asumimos cantidad 0
                        currentQuantity = 0;
                    }
                }

                // Verificar si hay suficiente stock
                if (currentQuantity >= stockDisponible) {
                    throw new Error('No hay suficiente stock disponible');
                }

                const response = await fetch(`/api/carts/${cartId}/products/${productId}`, {
                    method: 'POST'
                });

                if (response.ok) {
                    // Limpiar clases anteriores
                    toastBody.parentElement.classList.remove('bg-success', 'bg-danger', 'bg-warning', 'text-white', 'text-dark');
                    // Agregar nuevas clases
                    toastBody.parentElement.classList.add('bg-success', 'text-white');
                    toastBody.textContent = '¡Producto agregado al carrito exitosamente!';
                    toast.show();

                    // Si llegamos al límite de stock, deshabilitamos el botón
                    if (currentQuantity + 1 >= stockDisponible) {
                        const button = document.querySelector(`button[onclick="addToCart('${productId}', ${stockDisponible})"]`);
                        if (button) {
                            button.disabled = true;
                            button.textContent = 'Sin Stock';
                        }
                    }
                } else {
                    const errorData = await response.json();
                    throw new Error(errorData.error || 'Error al agregar al carrito');
                }
            } catch (error) {
                console.error('Error:', error);
                // Limpiar clases anteriores
                toastBody.parentElement.classList.remove('bg-success', 'bg-danger', 'bg-warning', 'text-white', 'text-dark');
                // Agregar nuevas clases
                toastBody.parentElement.classList.add('bg-danger', 'text-white');
                toastBody.textContent = error.message || 'Error al agregar el producto al carrito';
                toast.show();
            }
        }

        async function viewCart() {
            try {
                const cartId = localStorage.getItem('cartId');
                if (!cartId) {
                    // Crear un nuevo carrito si no existe
                    const response = await fetch('/api/carts', {
                        method: 'POST'
                    });
                    
                    if (!response.ok) {
                        throw new Error('Error al crear el carrito');
                    }
                    
                    const data = await response.json();
                    localStorage.setItem('cartId', data.payload._id);
                    window.location.href = `/carts/${data.payload._id}`;
                    return;
                }

                // Verificar si el carrito existe en el servidor
                try {
                    const checkResponse = await fetch(`/api/carts/${cartId}`);
                    if (!checkResponse.ok) {
                        // Si el carrito no existe, crear uno nuevo
                        localStorage.removeItem('cartId');
                        viewCart(); // Llamar recursivamente para crear nuevo carrito
                        return;
                    }
                    // Si el carrito existe, redirigir
                    window.location.href = `/carts/${cartId}`;
                } catch (error) {
                    console.error('Error al verificar el carrito:', error);
                    toastBody.parentElement.classList.remove('bg-success', 'bg-danger', 'bg-warning', 'text-white', 'text-dark');
                    toastBody.parentElement.classList.add('bg-danger', 'text-white');
                    toastBody.textContent = 'Error al acceder al carrito. Por favor, intenta de nuevo.';
                    toast.show();
                }
            } catch (error) {
                console.error('Error:', error);
                toastBody.parentElement.classList.remove('bg-success', 'bg-danger', 'bg-warning', 'text-white', 'text-dark');
                toastBody.parentElement.classList.add('bg-danger', 'text-white');
                toastBody.textContent = error.message || 'Error al acceder al carrito';
                toast.show();
            }
        }

        // Mantener los filtros seleccionados en el formulario
        document.getElementById('filterForm').addEventListener('submit', function(e) {
            e.preventDefault();
            const formData = new FormData(this);
            const params = new URLSearchParams();
            
            for (let [key, value] of formData.entries()) {
                if (value) params.append(key, value);
            }
            
            window.location.href = `/products?${params.toString()}`;
        });

        // Función para actualizar los filtros en los enlaces de paginación
        function updatePaginationLinks() {
            const params = new URLSearchParams(window.location.search);
            const links = document.querySelectorAll('.pagination a');
            
            links.forEach(link => {
                const url = new URL(link.href);
                const pageParams = new URLSearchParams(url.search);
                
                // Mantener los filtros actuales
                if (params.get('category')) pageParams.set('category', params.get('category'));
                if (params.get('sort')) pageParams.set('sort', params.get('sort'));
                if (params.get('limit')) pageParams.set('limit', params.get('limit'));
                
                link.href = `${url.pathname}?${pageParams.toString()}`;
            });
        }

        // Actualizar enlaces de paginación cuando se carga la página
        document.addEventListener('DOMContentLoaded', updatePaginationLinks);
    </script>
</body>
</html> 